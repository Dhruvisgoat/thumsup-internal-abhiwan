import React, { useEffect, useContext, useState } from 'react';
import { DirectionContext } from '../../RefContext/DirectionContext';
import { PauseContext } from '../../RefContext/PauseContext';

const ThreeMinuteTimer = () => {
    const { pause } = useContext(PauseContext);
    const { timeLeft, setTimeLeft } = useContext(DirectionContext);


    //timer doesn't stop when exiting tab 
    // useEffect(() => {
    //     if (timeLeft <= 0) return;

    //     const intervalId = setInterval(() => {
    //         setTimeLeft(prevTime => prevTime - 1);
    //     }, 1000);

    //     return () => clearInterval(intervalId);
    // }, [timeLeft]);


    // timer stops when exiting the tab 
    const [isTabActive, setIsTabActive] = useState(true);
   useEffect(() => {
        const handleVisibilityChange = () => {
            setIsTabActive(document.visibilityState === "visible");
        };

        // Listen for visibility changes
        document.addEventListener("visibilitychange", handleVisibilityChange);

        return () => {
            document.removeEventListener("visibilitychange", handleVisibilityChange);
        };
    }, []);

    useEffect(() => {
        if (!isTabActive || timeLeft <= 0 || pause) return;

        const intervalId = setInterval(() => {
            setTimeLeft(prevTime => prevTime - 1);
        }, 1000);

        return () => clearInterval(intervalId);
    }, [isTabActive, timeLeft, pause]);
    
    const formatTime = (seconds) => {
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    };

    return (
        <div style={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            background: " #1A265B",
            color: '#ff1a1a',
            borderRadius: '8px',
            border: '2px solid white',
        }}>
            <div style={{
                padding: '5px ',
                textAlign: 'center',
                maxWidth: '220px',
                display: 'flex',
                alignItems: 'center',
                gap: "10px"
            }}>
                <svg width="25" height="25" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g clip-path="url(#clip0_1_345)">
                        <path d="M10.9616 22.0001C4.8972 21.9905 -0.0193189 17.0357 -0.000188501 10.9522C0.0189419 4.87832 4.97372 -0.0190746 11.0668 5.58557e-05C17.112 0.0191863 22.0094 4.9644 21.9998 11.0288C21.9902 17.1027 17.045 22.0192 10.9616 22.0001ZM10.9902 21.1392C16.5859 21.1392 21.1294 16.6053 21.1389 11.0288C21.1485 5.4331 16.6146 0.870491 11.0381 0.860925C5.42329 0.85136 0.860681 5.39484 0.860681 11.0001C0.860681 16.5957 5.40416 21.1392 10.9902 21.1392Z" fill="white" />
                        <path d="M11.0286 2.58303C15.6869 2.59259 19.4365 6.37085 19.4173 11.0387C19.3982 15.6969 15.6199 19.4369 10.9521 19.4178C6.31297 19.3987 2.57297 15.63 2.58254 10.9813C2.5921 6.32303 6.3608 2.57346 11.0286 2.58303ZM10.5791 14.53C10.5791 14.9222 10.5791 15.2378 10.5791 15.5535C10.5791 15.85 10.6365 16.1369 10.9808 16.1465C11.3634 16.1561 11.4304 15.8595 11.4304 15.5535C11.4304 14.7595 11.4399 13.9561 11.4208 13.1622C11.4112 12.8465 11.4686 12.6648 11.7938 12.5022C12.7025 12.0526 12.9704 10.9526 12.4347 10.0917C11.9182 9.25955 10.8182 9.04911 10.0051 9.6039C9.21123 10.1587 8.9721 11.3352 9.6608 12.0239C10.1295 12.4926 10.0817 12.8943 9.89993 13.3917C9.83297 13.5735 9.79471 13.7648 9.75645 13.9465C9.69906 14.1761 9.60341 14.4152 9.81384 14.6161C10.053 14.8361 10.2921 14.7117 10.5791 14.53ZM6.81036 4.5152C6.93471 4.83085 7.06862 5.1752 7.36515 5.41433C7.49906 5.51955 7.67123 5.49085 7.81471 5.38563C7.96776 5.27085 8.03471 5.09868 7.95819 4.91694C7.84341 4.67781 7.70949 4.43868 7.54689 4.21868C7.4321 4.06563 7.25993 4.02737 7.07819 4.11346C6.90602 4.18042 6.84862 4.31433 6.81036 4.5152ZM15.1799 4.47694C15.1512 4.24737 15.0173 4.08476 14.7495 4.0752C14.5104 4.06563 14.0034 4.7352 14.013 5.05085C14.0225 5.30911 14.166 5.46216 14.4338 5.47172C14.6921 5.46216 15.1799 4.81172 15.1799 4.47694ZM5.00254 14.0135C4.69645 14.1187 4.3808 14.2717 4.14167 14.5395C4.02689 14.6639 4.03645 14.8456 4.14167 14.9891C4.24689 15.1422 4.41906 15.2474 4.59123 15.1613C4.84949 15.0465 5.09819 14.903 5.33732 14.7404C5.49036 14.6256 5.50949 14.4343 5.42341 14.2622C5.34689 14.0995 5.20341 14.023 5.00254 14.0135ZM4.44776 6.82042C4.22776 6.86824 4.06515 7.00216 4.06515 7.26998C4.07471 7.50911 4.75384 8.0065 5.05036 7.98737C5.30862 7.96824 5.4521 7.8152 5.4521 7.54737C5.4521 7.30824 4.76341 6.81085 4.44776 6.82042ZM17.9347 7.23172C17.906 7.00216 17.7912 6.86824 17.5808 6.82998C17.3704 6.78216 16.653 7.19346 16.5765 7.39433C16.4999 7.5952 16.5382 7.77694 16.7199 7.90129C16.9399 8.05433 17.1504 7.95868 17.3417 7.83433C17.5808 7.68129 17.9156 7.60476 17.9347 7.23172ZM16.8921 14.023C16.6912 14.0613 16.5286 14.1952 16.5382 14.463C16.5478 14.7022 17.2365 15.2091 17.5234 15.1804C17.7817 15.1517 17.9347 15.0082 17.9251 14.7404C17.9251 14.4917 17.246 14.0039 16.8921 14.023ZM7.98689 16.9309C7.95819 16.7013 7.82428 16.5482 7.55645 16.5482C7.31732 16.5482 6.81036 17.2178 6.82949 17.5239C6.84863 17.7822 6.9921 17.9352 7.25993 17.9352C7.49906 17.9352 7.98689 17.2656 7.98689 16.9309ZM14.4243 16.5387C14.2043 16.5482 14.0608 16.6726 14.0225 16.9117C13.9843 17.17 14.4243 17.8587 14.6538 17.9161C14.8643 17.9735 15.0269 17.8874 15.1225 17.6961C15.2851 17.3804 14.7973 16.5482 14.4243 16.5387ZM10.5695 3.77868C10.5791 3.97955 10.5312 4.19955 10.6651 4.38129C10.7799 4.53433 10.9425 4.60129 11.1243 4.52476C11.4304 4.40998 11.4304 4.14216 11.4208 3.8839C11.4112 3.59694 11.5069 3.25259 11.1434 3.08998C10.9617 3.01346 10.7991 3.06129 10.6747 3.21433C10.5504 3.3865 10.5791 3.58737 10.5695 3.77868ZM3.9408 10.5795C3.73036 10.5795 3.65384 10.5795 3.57732 10.5795C3.29036 10.5891 3.07036 10.6943 3.07993 11.0195C3.08949 11.3161 3.29993 11.4213 3.56776 11.4213C3.78776 11.4213 4.01732 11.4309 4.23732 11.3926C4.44776 11.3543 4.56254 11.1917 4.55297 10.9813C4.54341 10.79 4.43819 10.6465 4.24689 10.6082C4.10341 10.5795 3.95036 10.5795 3.9408 10.5795ZM18.193 11.4404C18.193 11.4309 18.193 11.4309 18.193 11.4213C18.3078 11.4213 18.413 11.4309 18.5278 11.4213C18.786 11.3926 18.9391 11.2491 18.9295 10.9813C18.9199 10.7422 18.7669 10.5987 18.5278 10.5891C18.2791 10.5795 18.0208 10.5795 17.7721 10.6082C17.5808 10.6274 17.466 10.79 17.4565 10.9813C17.4469 11.1917 17.5521 11.3543 17.7721 11.4022C17.906 11.4309 18.0495 11.4213 18.193 11.4404ZM10.5695 18.1648C10.5791 18.3082 10.5695 18.4517 10.5982 18.5952C10.646 18.8343 10.8086 18.9682 11.0382 18.93C11.4591 18.863 11.4208 18.5282 11.4208 18.2222C11.4208 17.9065 11.4878 17.543 11.0478 17.4569C10.8182 17.4091 10.646 17.5526 10.5982 17.7822C10.5695 17.9065 10.5791 18.0404 10.5695 18.1648Z" fill="white" />
                        <path d="M11.0384 10.1394C11.4975 10.1585 11.8705 10.5698 11.861 11.0289C11.8418 11.5072 11.4114 11.8994 10.9427 11.8611C10.4836 11.8229 10.1201 11.402 10.1488 10.9524C10.1679 10.4933 10.5888 10.1202 11.0384 10.1394Z" fill="white" />
                    </g>
                    <defs>
                        <clipPath id="clip0_1_345">
                            <rect width="22" height="22" fill="white" />
                        </clipPath>
                    </defs>
                </svg>


                <div style={{
                    fontSize: '1rem',
                    fontWeight: 'bold',
                    color: 'white',
                    textShadow: '1px 1px 5px rgba(0, 0, 0, 0.6)'
                }}>{formatTime(timeLeft)}</div>

                {/* <div style={{
                    fontSize: '1rem',
                    fontWeight: '500',
                    color: '#ffffff',
                    marginTop: '10px'
                }}>
                    Points Collected: <span style={{ color: '#ff1a1a' }}>{collectedCount}</span>
                </div> */}
            </div>
        </div>
    );
};

export default ThreeMinuteTimer;
